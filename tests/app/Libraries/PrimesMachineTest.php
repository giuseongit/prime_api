<?php

namespace App\Libraries;

use CodeIgniter\Test\CIUnitTestCase;

class PrimesMachineTest extends CIUnitTestCase
{
    public function testIsPrimeFunction()
    {
        $isPrime = $this->getPrivateMethodInvoker(PrimesMachine::class, 'isPrime');

        $primes = [
            2, 3, 5, 7, 11, 13, 17, 19, 23,
            29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
            71, 73, 79, 83, 89, 97, 101, 103, 107, 109,
            113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
            173, 179, 181, 191, 193, 197, 199, 211, 223, 227,
            229, 233, 239, 241, 251, 257, 263, 269, 271, 277,
            281, 283, 293, 307, 311, 313, 317, 331, 337, 347,
            349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
            409, 419, 421, 431, 433, 439, 443, 449, 457, 461,
            463, 467, 479, 487, 491, 499, 503, 509, 521, 523,
            541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
            601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
            659, 661, 673, 677, 683, 691, 701, 709, 719, 727,
            733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
            809, 811, 821, 823, 827, 829, 839, 853, 857, 859,
            863, 877, 881, 883, 887, 907, 911, 919, 929, 937,
            941, 947, 953, 967, 971, 977, 983, 991, 997,
        ];

        for ($i = 0; $i < 1000; $i++) {
            if (in_array($i, $primes)) {
                $this->assertTrue($isPrime($i), "Failed: $i is not prime");
            }else{
                $this->assertFalse($isPrime($i), "Failed: $i is prime");
            }
        }
    }

    public function testNextFunction()
    {
        $expected = [
            2 => 3, 3 => 5, 5 => 7, 7 => 11, 11 => 13, 13 => 17, 17 => 19,
            19 => 23, 23 => 29, 29 => 31, 31 => 37, 37 => 41, 41 => 43, 43 => 47,
            47 => 53, 53 => 59, 59 => 61, 61 => 67, 67 => 71, 71 => 73, 73 => 79,
            79 => 83, 83 => 89, 89 => 97, 97 => 101, 101 => 103, 103 => 107, 107 => 109,
            109 => 113, 113 => 127, 127 => 131, 131 => 137, 137 => 139, 139 => 149,149 => 151,
            151 => 157, 157 => 163, 163 => 167, 167 => 173, 173 => 179, 179 => 181, 181 => 191,
            191 => 193, 193 => 197, 197 => 199, 199 => 211, 211 => 223, 223 => 227, 227 => 229,
            229 => 233, 233 => 239, 239 => 241, 241 => 251, 251 => 257, 257 => 263, 263 => 269,
            269 => 271, 271 => 277, 277 => 281, 281 => 283, 283 => 293, 293 => 307, 307 => 311,
            311 => 313, 313 => 317, 317 => 331, 331 => 337, 337 => 347, 347 => 349, 349 => 353,
            353 => 359, 359 => 367, 367 => 373, 373 => 379, 379 => 383, 383 => 389, 389 => 397,
            397 => 401, 401 => 409, 409 => 419, 419 => 421, 421 => 431, 431 => 433, 433 => 439,
            439 => 443, 443 => 449, 449 => 457, 457 => 461, 461 => 463, 463 => 467, 467 => 479,
            479 => 487, 487 => 491, 491 => 499, 499 => 503, 503 => 509, 509 => 521, 521 => 523,
            523 => 541, 541 => 547, 547 => 557, 557 => 563, 563 => 569, 569 => 571, 571 => 577,
            577 => 587, 587 => 593, 593 => 599, 599 => 601, 601 => 607, 607 => 613, 613 => 617,
            617 => 619, 619 => 631, 631 => 641, 641 => 643, 643 => 647, 647 => 653, 653 => 659,
            659 => 661, 661 => 673, 673 => 677, 677 => 683, 683 => 691, 691 => 701, 701 => 709,
            709 => 719, 719 => 727, 727 => 733, 733 => 739, 739 => 743, 743 => 751, 751 => 757,
            757 => 761, 761 => 769, 769 => 773, 773 => 787, 787 => 797, 797 => 809, 809 => 811,
            811 => 821, 821 => 823, 823 => 827, 827 => 829, 829 => 839, 839 => 853, 853 => 857,
            857 => 859, 859 => 863, 863 => 877, 877 => 881, 881 => 883, 883 => 887, 887 => 907,
            907 => 911, 911 => 919, 919 => 929, 929 => 937, 937 => 941, 941 => 947, 947 => 953,
            953 => 967, 967 => 971, 971 => 977, 977 => 983, 983 => 991, 991 => 997,
        ];


        foreach ($expected as $elem => $expectedNext) {
            $actualNext = PrimesMachine::next($elem);
            $this->assertEquals($expectedNext, $actualNext, "Failed: the next prime of $elem is $expectedNext but got $actualNext");
        }
    }

    public function testPrevFunction()
    {
        $expected = [
            3 => 2, 5 => 3, 7 => 5, 11 => 7, 13 => 11, 17 => 13, 19 => 17,
            23 => 19, 29 => 23, 31 => 29, 37 => 31, 41 => 37, 43 => 41, 47 => 43,
            53 => 47, 59 => 53, 61 => 59, 67 => 61, 71 => 67, 73 => 71, 79 => 73,
            83 => 79, 89 => 83, 97 => 89, 101 => 97, 103 => 101, 107 => 103, 109 => 107,
            113 => 109, 127 => 113, 131 => 127, 137 => 131, 139 => 137, 149 => 139, 151 => 149,
            157 => 151, 163 => 157, 167 => 163, 173 => 167, 179 => 173, 181 => 179, 191 => 181,
            193 => 191, 197 => 193, 199 => 197, 211 => 199, 223 => 211, 227 => 223, 229 => 227,
            233 => 229, 239 => 233, 241 => 239, 251 => 241, 257 => 251, 263 => 257, 269 => 263,
            271 => 269, 277 => 271, 281 => 277, 283 => 281, 293 => 283, 307 => 293, 311 => 307,
            313 => 311, 317 => 313, 331 => 317, 337 => 331, 347 => 337, 349 => 347, 353 => 349,
            359 => 353, 367 => 359, 373 => 367, 379 => 373, 383 => 379, 389 => 383, 397 => 389,
            401 => 397, 409 => 401, 419 => 409, 421 => 419, 431 => 421, 433 => 431, 439 => 433,
            443 => 439, 449 => 443, 457 => 449, 461 => 457, 463 => 461, 467 => 463, 479 => 467,
            487 => 479, 491 => 487, 499 => 491, 503 => 499, 509 => 503, 521 => 509, 523 => 521,
            541 => 523, 547 => 541, 557 => 547, 563 => 557, 569 => 563, 571 => 569, 577 => 571,
            587 => 577, 593 => 587, 599 => 593, 601 => 599, 607 => 601, 613 => 607, 617 => 613,
            619 => 617, 631 => 619, 641 => 631, 643 => 641, 647 => 643, 653 => 647, 659 => 653,
            661 => 659, 673 => 661, 677 => 673, 683 => 677, 691 => 683, 701 => 691, 709 => 701,
            719 => 709, 727 => 719, 733 => 727, 739 => 733, 743 => 739, 751 => 743, 757 => 751,
            761 => 757, 769 => 761, 773 => 769, 787 => 773, 797 => 787, 809 => 797, 811 => 809,
            821 => 811, 823 => 821, 827 => 823, 829 => 827, 839 => 829, 853 => 839, 857 => 853,
            859 => 857, 863 => 859, 877 => 863, 881 => 877, 883 => 881, 887 => 883, 907 => 887,
            911 => 907, 919 => 911, 929 => 919, 937 => 929, 941 => 937, 947 => 941, 953 => 947,
            967 => 953, 971 => 967, 977 => 971, 983 => 977, 991 => 983, 997 => 991,
        ];


        foreach ($expected as $elem => $expectedPrevious) {
            $actualPrevious = PrimesMachine::prev($elem);
            $this->assertEquals($expectedPrevious, $actualPrevious, "Failed: the previous prime of $elem is $expectedPrevious but got $actualPrevious");
        }
    }

    public function testBetweenFunction()
    {
        $expected = [
            "1,20"     => [2,3,5,7,11,13,17,19],
            "1,30"     => [2,3,5,7,11,13,17,19,23,29],
            "1,40"     => [2,3,5,7,11,13,17,19,23,29,31,37],
            "1,50"     => [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47],
            "20,60"    => [23,29,31,37,41,43,47,53,59],
            "20,70"    => [23,29,31,37,41,43,47,53,59,61,67],
            "50,80"    => [53,59,61,67,71,73,79],
            "90,200"   => [97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199],
            "200,300"  => [211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293],
            "300,400"  => [307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397],
            "400,500"  => [401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499],
            "500,600"  => [503,509,521,523,541,547,557,563,569,571,577,587,593,599],
            "600,700"  => [601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691],
            "700,800"  => [701,709,719,727,733,739,743,751,757,761,769,773,787,797],
            "800,900"  => [809,811,821,823,827,829,839,853,857,859,863,877,881,883,887],
            "900,1000" => [907,911,919,929,937,941,947,953,967,971,977,983,991,997],
        ];


        foreach ($expected as $rawElems => $expectedRange) {
            $elems = explode(',', $rawElems);
            $elems = array_map('intval', $elems);
            $actualRange = PrimesMachine::between($elems[0], $elems[1]);
            $this->assertEquals($expectedRange, $actualRange, "Failed: the primes between $elems[0] and $elems[1] are:\n[".implode(' ', $expectedRange)."] but got:\n[".implode(' ', $actualRange)."]");
        }
    }
}